package app.exploitr.hackbright;

import android.os.Build;
import android.os.Bundle;
import android.support.design.widget.FloatingActionButton;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.KeyEvent;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;

import me.tankery.lib.circularseekbar.CircularSeekBar;

public class MainActivity extends AppCompatActivity {

    CircularSeekBar seekBar;
    TextView seekback;
    private Boolean isTrue;
    private int Progress;
    private int ino;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        seekBar = (CircularSeekBar) findViewById(R.id.orderBar);
        seekback = (TextView) findViewById(R.id.underThumb);
        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.help);

        new ShellGet(seekBar, seekback).execute();

        fab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                    finishAndRemoveTask();
                } else finish();
            }
        });

        seekBar.setNegativeEnabled(false);
        seekBar.setOnSeekBarChangeListener(new CircularSeekBar.OnCircularSeekBarChangeListener() {
            @Override
            public void onProgressChanged(CircularSeekBar circularSeekBar, float progress, boolean fromUser) {
                isTrue = fromUser;
                Progress = Math.round(progress);
                ino = ((Progress) * 255) / 100;
            }

            @Override
            public void onStopTrackingTouch(CircularSeekBar seekBar) {
                if (isTrue)
                    new ShellSet(seekBar, seekback, getWindow().getDecorView()).execute(ino);
                //I don't want a mess in onProgressChanged
            }

            @Override
            public void onStartTrackingTouch(CircularSeekBar seekBar) {
            }
        });

        Button plux = (Button) findViewById(R.id.plux);
        plux.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                System.out.println(ino);
                new ShellSet(seekBar, seekback, getWindow().getDecorView()).execute(ino+1);
            }
        });
        Button minux = (Button) findViewById(R.id.minux);
        minux.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                System.out.println(ino);
                new ShellSet(seekBar, seekback, getWindow().getDecorView()).execute(ino-1);
            }
        });
    }

    @Override
    public boolean onKeyUp(int keyCode, KeyEvent event) {
        super.onKeyUp(keyCode, event);
        if (keyCode == KeyEvent.KEYCODE_VOLUME_UP) {
            Progress++;
            new ShellSet(seekBar, seekback, getWindow().getDecorView()).execute(((Progress) * 255) / 100);
            System.out.println("TEST OKAY UP");
        }
        return false;
    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        super.onKeyDown(keyCode, event);
        if (keyCode == KeyEvent.KEYCODE_VOLUME_DOWN) {
            Progress--;
            new ShellSet(seekBar, seekback, getWindow().getDecorView()).execute(((Progress) * 255) / 100);
            System.out.println("TEST OKAY DOWN");
        }
        return false;
    }

}
