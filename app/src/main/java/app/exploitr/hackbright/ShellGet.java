package app.exploitr.hackbright;


import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class ShellGet {

    private String XPATH, XMPATH;

    private ExecutorService service;
    private Future<Integer> task;

    ShellGet(String path, String pathm) {
        this.XPATH = path;
        this.XMPATH = pathm;
    }

    int getCurrentBrightness() {
        service = Executors.newFixedThreadPool(1);
        task = service.submit(new Worker(XPATH));
        try {
            return task.get();
        } catch (Exception e) {
            service.shutdownNow();
            e.printStackTrace();
            e.getSuppressed();
        }
        return 0;
    }

    int getMaxBrightness() {
        service = Executors.newFixedThreadPool(1);
        task = service.submit(new Worker(XMPATH));
        try {
            return task.get();
        } catch (Exception e) {
            service.shutdownNow();
            e.printStackTrace();
            e.getSuppressed();
        }
        return 255;
    }


    private class Worker implements Callable<Integer> {

        private String road;
        private Process executor;
        private StringBuilder dataPreter;
        private BufferedReader dataReader;

        Worker(String path) {
            road = path; // :-D
        }

        @Override
        public Integer call() throws Exception {
            executor = Runtime.getRuntime().exec("su -c cat " + road);
            executor.waitFor();

            dataReader = new BufferedReader(new InputStreamReader(executor.getInputStream()));
            dataPreter = new StringBuilder();

            String line;
            while ((line = dataReader.readLine()) != null) {
                dataPreter.append(line).append('\n');
            }
            dataReader.close();

            System.out.println(road + ":" + dataPreter.toString());

            return Integer.parseInt(dataPreter.toString().replaceAll("[^0123456789]", ""));

        }
    }

}
